import pandas as pd

drug = pd.read_csv(base_path + 'DRUG24Q4.txt', sep='$')
reac = pd.read_csv(base_path + 'REAC24Q4.txt', sep='$')
ther = pd.read_csv(base_path + 'THER24Q4.txt', sep='$')
indi = pd.read_csv(base_path + 'INDI24Q4.txt', sep='$')
rpsr = pd.read_csv(base_path + 'RPSR24Q4.txt', sep='$')
demo = pd.read_csv(base_path + 'DEMO24Q4.txt', sep='$')
outc = pd.read_csv(base_path + 'OUTC24Q4.txt', sep='$')

# Processes drug df
drug = drug[pd.notnull(drug['drugname'])]  # Drops Nulls
drug['drugname'] = drug['drugname'].str.strip().str.lower()  # Stips whitespace, Transforms to lowercase
drug = drug[~drug['drugname'].isin(['unknown'])]  # Drops unknowns
drug['drugname'] = drug['drugname'].str.replace('\\', '/')  # Standardizes slashes to '/'
drug['drugname'] = drug['drugname'].map(
    lambda x: x[:-1] if str(x).endswith(".") else x)  # Removes periods at the end of drug names

# Process reac df 
reac = reac[pd.notnull(reac['pt'])] # Drops Nulls
reac['pt'] = reac['pt'].str.strip().str.lower()  # Transforms to lowercase
reac = reac[~reac['pt'].isin(['unknown'])]  # Drops unknowns
reac['pt'] = reac['pt'].map(
    lambda x: x[:-1] if str(x).endswith(".") else x)  # Removes periods at the end of drug names

# Process demo df 
demo = demo[pd.notnull(demo['age'])]
demo = demo[demo.age_cod != 'dec'].reset_index(drop=True) 
demo['age'] = demo['age'].apply(pd.to_numeric, errors='coerce')
demo['age'] = np.where(demo['age_cod'] == 'MON', demo['age'] * 1 / 12, demo['age'])  # mounth
demo['age'] = np.where(demo['age_cod'] == 'WK', demo['age'] * 1 / 52, demo['age'])  # week
demo['age'] = np.where(demo['age_cod'] == 'DY', demo['age'] * 1 / 365, demo['age'])  # day
demo['age'] = np.where(demo['age_cod'] == 'HR', demo['age'] * 1 / 8760, demo['age'])  # hour
demo = demo.drop(['age_cod'], axis=1)

demo = demo.sort_values('caseversion', ascending=False).drop_duplicates(subset='caseid', keep='last')

drug_merged = pd.merge(drug, demo_latest, on='primaryid', how='left')

query_drug = 'aspirin' 

query_drug_df = drug_merged[
    drug_merged['drugname'].str.lower().str.contains('aspirin', na=False) |
    drug_merged['prod_ai'].str.lower().str.contains('aspirin', na=False)
]
query_drug_ps = query_drug_df[query_drug_df['role_cod'] == 'PS']

query_drug_ids = query_drug_df['primaryid'].unique()
query_drug_reac = reac[reac['primaryid'].isin(query_drug_ids)]
ae_counts = query_drug_reac['pt'].value_counts().reset_index()
ae_counts.columns = ['Adverse_Event', 'Count']

ps_ids = query_drug_ps['primaryid'].unique()
ps_reac = reac[reac['primaryid'].isin(ps_ids)]
ps_ae_counts = ps_reac['pt'].value_counts().reset_index()
ps_ae_counts.columns = ['Adverse_Event', 'Count']

non_query_drug = drug[~drug['primaryid'].isin(query_drug_ids)]
non_ps_drug = drug[~drug['primaryid'].isin(ps_ids)]

non_query_ids = non_query_drug['primaryid'].unique()
non_query_reac = reac[reac['primaryid'].isin(non_query_ids)]
non_ae_counts = non_query_reac['pt'].value_counts().reset_index()
non_ae_counts.columns = ['Adverse_Event', 'Count']

non_ps_ids = non_ps_drug['primaryid'].unique()
non_ps_reac = reac[reac['primaryid'].isin(non_ps_ids)]
ps_non_ae_counts = non_ps_reac['pt'].value_counts().reset_index()
ps_non_ae_counts.columns = ['Adverse_Event', 'Count']

ae_counts.columns = ['Adverse_Event', 'Count_query_drug']
non_ae_counts.columns = ['Adverse_Event', 'Count_non_query_drug']
ps_ae_counts.columns = ['Adverse_Event', 'Count_query_drug']
ps_non_ae_counts.columns = ['Adverse_Event', 'Count_non_query_drug']
print(ae_counts.head(30))
print(non_ae_counts.head(30))

ae_comparison = pd.merge(
    ae_counts,
    non_ae_counts,
    on='Adverse_Event',
    how='outer'
)
print(ae_comparison.head(30))

ps_comparison = pd.merge(
    ps_ae_counts,
    ps_non_ae_counts,
    on='Adverse_Event',
    how='outer'
)
print(ae_comparison.head(30))

ae_filtered = ae_comparison[
    (ae_comparison['Count_query_drug'].notna()) &
    (ae_comparison['Count_query_drug'] >= 3)
]
ae_filtered

ps_filtered = ps_comparison[
    (ps_comparison['Count_query_drug'].notna()) &
    (ps_comparison['Count_query_drug'] >= 3)
]
ps_filtered

asp_num = aspirin_ids.shape[0]
non_num = non_aspirin_ids.shape[0]
ae_filtered['No_AE_aspirin'] = asp_num - ae_filtered['Count_query_drug']
ae_filtered['No_AE_non_aspirin'] = non_num - ae_filtered['Count_non_aspirin']
ae_filtered

ps_num = ps_ids.shape[0]
ps_non_num = non_ps_ids.shape[0]
ps_filtered['No_AE_aspirin'] = ps_num - ps_filtered['Count_aspirin']
ps_filtered['No_AE_non_aspirin'] = ps_non_num - ps_filtered['Count_non_aspirin']
ps_filtered

from scipy.stats import chi2_contingency
p_values = []

for _, row in ae_filtered.iterrows():
    table = [[row['Count_aspirin'], row['No_AE_aspirin']],
             [row['Count_non_aspirin'], row['No_AE_non_aspirin']]]

    _, p, _, _ = chi2_contingency(table)
    p_values.append(p)

ae_filtered['p_value'] = p_values


p_values = []

for _, row in ps_filtered.iterrows():
    table = [[row['Count_aspirin'], row['No_AE_aspirin']],
             [row['Count_non_aspirin'], row['No_AE_non_aspirin']]]

    _, p, _, _ = chi2_contingency(table)
    p_values.append(p)

ps_filtered['p_value'] = p_values

from statsmodels.stats.multitest import multipletests
ae_filtered_valid = ae_filtered[ae_filtered['p_value'].notna()].copy()
_, corrected_p_values, _, _ = multipletests(ae_filtered_valid['p_value'], alpha=0.05, method='fdr_bh')

ae_filtered_valid['corrected_p_value'] = corrected_p_values

ps_filtered_valid = ps_filtered[ps_filtered['p_value'].notna()].copy()
_, corrected_p_values, _, _ = multipletests(ps_filtered_valid['p_value'], alpha=0.05, method='fdr_bh')

ps_filtered_valid['corrected_p_value'] = corrected_p_values

significant_aspirin = ae_filtered_valid[
    (ae_filtered_valid['corrected_p_value'] < .05) &  # Significant result
     (ae_filtered_valid['Count_aspirin']/ae_filtered['No_AE_aspirin'] > ae_filtered['Count_non_aspirin']/ae_filtered['No_AE_non_aspirin']) # Aspirin has more events
]
ps_significant_aspirin = ps_filtered_valid[
    (ps_filtered_valid['corrected_p_value'] < .05) &  # Significant result
     (ps_filtered_valid['Count_aspirin']/ae_filtered['No_AE_aspirin'] > ae_filtered['Count_non_aspirin']/ae_filtered['No_AE_non_aspirin']) # Aspirin has more events
]
